#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t' # _not_ spaces

VERSION=v0.0.1

# Debugging, false (non-zero) by default
# shellcheck disable=SC2034
GIT_PAIR_DEBUG="${GIT_PAIR_DEBUG:-}"
if [[ "${GIT_PAIR_DEBUG}" ]]; then
  set -x
fi

# Global Variables
declare _grep
case "${OSTYPE}" in
  darwin*)
    # Installed via Brew
    # shellcheck disable=SC2034
    _grep="ggrep"
    ;;
  *)
    # Installed via OS packages
    # shellcheck disable=SC2034
    _grep="grep"
    ;;
esac

error() {
  local exit_code="${1}"
  shift
  echo "ERROR: ${*}" >&2
  exit "${exit_code}"
}

version() {
  echo "$(basename "$0"): $VERSION"
}

usage() {
  cat << END
Usage: $0 [-h|-v] [init|reset|on|off|show [all]|on|off|<del|rm> <regex1 [regex2...]>|<add|with> <regex1 [regex2...]>]
  -h: Show usage (this message)
  -v: Show version
  init: initialisation for pairing (git user-specific configuration)
  reset: clear active pair list
  off: disable pairing
  on: enable pairing
  del/rm: remove names matching 'regex' to list of pairs
  add/with: add names matching 'regex' to list of pairs
  show: show current pair list
  show all: show all pairs available
  status: display on/off status and current pairs

  Current directory must be anywhere in a git workspace. This tool will not work in a bare git repository.
  The on/off state is completely separate from the pair list. Modifying the pair list does change the on/off state.
END
}

declare -g git_project_dir

# Pair file format:
# John Smith <john.smith@example.com>
# ^ space separated names, email address wrapped in <>
declare -g pair_file

_init_globals() {
  # permit these commands to fail if needed.
  set +e
  # shellcheck disable=SC2155
  local _git_superproject_dir="$(git rev-parse --show-superproject-working-tree 2> /dev/null)"
  # older verisons of git just return '--show-superproject-working-tree'
  if [[ "$_git_superproject_dir" == "--show-superproject-working-tree" ]]; then
    _git_superproject_dir=""
  fi
  # shellcheck disable=SC2155
  local _git_project_dir="$(git rev-parse --show-toplevel 2> /dev/null)"
  set -e
  git_project_dir=${_git_superproject_dir:-${_git_project_dir}}
  pair_file="${GIT_PAIR_FILE:-${git_project_dir:+${git_project_dir}/.pairs}}"

  if [[ -n "${git_project_dir}" && -d "${git_project_dir}" ]]; then
    return 0
  else
    return 1
  fi
}

pair_init() {
  local _option=""
  [[ ! -v GIT_CONFIG ]] && _option="--global"
  git config ${_option} "trailer.Co-Authored-By.where" after
  git config ${_option} "trailer.Co-Authored-By.ifexists" addIfDifferent
}

pair_is_enabled() {
  # ifmissing = undefined, null or add return 0 (true), doNothing return non-zero (false)
  local _ifmissing
  _ifmissing=$(git config --get "trailer.Co-Authored-By.ifmissing")
  _ifmissing="${_ifmissing:-add}" # default behaviour
  if [[ "$_ifmissing" == "add" ]]; then
    return 0
  else
    return 1
  fi
}

pair_enable() {
  git config "trailer.Co-Authored-By.ifmissing" add
}

pair_disable() {
  git config "trailer.Co-Authored-By.ifmissing" doNothing
}

pair_authors() {
  local -n _authors="${1}"
  # shellcheck disable=SC2034
  mapfile -t _authors < <(git config --get-all trailer.Co-Authored-By.author)
}

pair_show_all() {
  echo "Pairs available:"
  if [[ -r "${pair_file}" ]]; then
    cat "${pair_file}"
  else
    echo "Pair file not found"
  fi
}

pair_reset() {
  echo "Unpairing all"
  git config --unset-all "trailer.Co-Authored-By.author"
}

pair_show() {
  if [[ "${#}" -eq 0 ]]; then
    echo "Pairing with:"
    git config --get-all "trailer.Co-Authored-By.author"
  else
    pair_show_all
  fi
}

pair_del() {
  for _regex in "${@}"; do
    echo "Removing authors matching regex: '${_regex}'"
    git config --unset "trailer.Co-Authored-By.author" "${_regex}"
  done
}

pair_add() {
  for _regex in "${@}"; do
    local authors
    if authors="$("${_grep}" -v -s -E '^\s*#' "${pair_file}" | "${_grep}" -s -E "${_regex}")"; then
      for _author in ${authors}; do
        echo "Pairing additionally with: ${_author}"
        git config --add "trailer.Co-Authored-By.author" "${_author}"
      done
    fi
  done
}

pair_status() {
  local -a authors
  pair_authors authors

  if pair_is_enabled; then
    echo "Pairing: enabled"
  else
    echo "Pairing: disabled"
  fi
  echo "Active Authors: ${authors[*]}"
}

pair_hook_prepare_commit_msg() {
  set -x
  local -a authors
  pair_authors authors
  if [[ ${#authors[@]} -gt 0 ]]; then
    local -a _args
    # Prefix all authors in the array
    # shellcheck disable=SC2124
    authors="${authors[@]/#/Co-Authored-By: }"
    for _author in "${authors[@]}"; do
      _args+=(--trailer)
      _args+=("${_author}")
    done
    git interpret-trailers --trim-empty --in-place --unfold "${_args[@]}" "${@}"
  fi
}

main() {
  # Option processing
  while getopts ":hv" opt; do
    case ${opt} in
      h)
        usage
        exit 0
        ;;
      v)
        version
        exit 0
        ;;
      \?)
        echo "Invalid Option: -$OPTARG" 1>&2
        exit 1
        ;;
    esac
  done

  shift $((OPTIND - 1))

  if [[ "$#" -eq 0 ]]; then
    usage
    exit 0
  fi

  # Everything except init requires globals set
  if [[ "${1}" != "init" ]]; then
    if ! _init_globals; then
      error 1 "Not in a .git repository!"
    fi
  fi

  case "${1}" in
    init)
      pair_init
      ;;
    reset)
      pair_reset
      ;;
    show | list)
      shift
      pair_show "${@}"
      ;;
    on | enable)
      pair_enable
      ;;
    off | disable)
      pair_disable
      ;;
    stat*)
      pair_status
      ;;
    del | rm)
      shift
      pair_del "${@}"
      ;;
    add | with)
      shift
      pair_add "${@}"
      ;;
    prepare-commit-msg)
      shift
      pair_hook_prepare_commit_msg "${@}"
      ;;
    *)
      error 1 "Unknown command supplied"
      ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "${@}"
fi
